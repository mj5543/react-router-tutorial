{"version":3,"sources":["components/Main/Main.js","pages/Home.js","pages/About.js","pages/Post.js","pages/Posts.js","components/Menu/Menu.js","shared/App.js","client/Root.js","serviceWorker.js","index.js"],"names":["Main","className","Home","About","location","match","query","queryString","parse","search","console","log","params","name","Post","id","Posts","to","url","exact","path","render","component","Menu","activeStyle","color","fontSize","App","Component","Root","Boolean","window","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yTAYeA,EATF,WAET,OACI,qBAAKC,UAAU,OAAf,SACI,2CCIGC,EARF,WACT,OACI,8BACE,cAAC,EAAD,O,iBCOKC,EAVD,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,MAChBC,EAAQC,IAAYC,MAAMJ,EAASK,QAEzC,OADAC,QAAQC,IAAIL,GAER,8BACI,wCAAWD,EAAMO,OAAOC,WCErBC,EARF,SAAC,GAAa,IAAZT,EAAW,EAAXA,MACX,OACI,sDACSA,EAAMO,OAAOG,OCefC,EAhBD,SAAC,GAAa,IAAZX,EAAW,EAAXA,MACZ,OACI,gCACG,2CACA,+BACK,6BAAI,cAAC,IAAD,CAAMY,GAAE,UAAKZ,EAAMa,IAAX,MAAR,uBACJ,6BAAI,cAAC,IAAD,CAAMD,GAAE,UAAKZ,EAAMa,IAAX,MAAR,uBACJ,6BAAI,cAAC,IAAD,CAAMD,GAAE,UAAKZ,EAAMa,IAAX,MAAR,uBACJ,6BAAI,cAAC,IAAD,CAAMD,GAAE,UAAKZ,EAAMa,IAAX,MAAR,0BAET,cAAC,QAAD,CAAOC,OAAK,EAACC,KAAMf,EAAMa,IAAKG,OAAQ,kBAAK,2DAC3C,cAAC,QAAD,CAAOD,KAAI,UAAKf,EAAMa,IAAX,QAAsBI,UAAWR,Q,QCOxCS,G,MAlBF,WACT,IAAMC,EAAc,CAChBC,MAAO,QACPC,SAAU,QAGd,OACI,qBAAKzB,UAAU,iBAAf,SACI,+BACI,6BAAI,cAAC,IAAD,CAASkB,OAAK,EAACF,GAAG,IAAIO,YAAaA,EAAnC,oBACJ,6BAAI,cAAC,IAAD,CAASL,OAAK,EAACF,GAAG,SAASO,YAAaA,EAAxC,qBACJ,6BAAI,cAAC,IAAD,CAASP,GAAG,aAAaO,YAAaA,EAAtC,yBACJ,6BAAI,cAAC,IAAD,CAASP,GAAG,SAASO,YAAaA,EAAlC,4BCWLG,G,kKAlBX,WACI,OACI,gCACI,cAAC,EAAD,IACA,sBAAK1B,UAAU,oBAAf,UACA,cAAC,QAAD,CAAOkB,OAAK,EAACC,KAAK,IAAIE,UAAWpB,IACjC,eAAC,SAAD,WACE,cAAC,QAAD,CAAOkB,KAAK,eAAeE,UAAWnB,IACtC,cAAC,QAAD,CAAOiB,KAAK,SAASE,UAAWnB,OAElC,cAAC,QAAD,CAAOiB,KAAK,SAASE,UAAWN,c,GAX9BY,cCEHC,EANF,kBACT,cAAC,IAAD,UACI,cAAC,EAAD,OCMYC,QACW,cAA7BC,OAAO3B,SAAS4B,UAEe,UAA7BD,OAAO3B,SAAS4B,UAEhBD,OAAO3B,SAAS4B,SAAS3B,MACvB,2D,MCXN4B,IAASZ,OAAO,cAAC,EAAD,IAAUa,SAASC,eAAe,SD0H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f86903dd.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Main.css';\r\n\r\nconst Main = () => {\r\n    \r\n    return (\r\n        <div className=\"main\">\r\n            <h2>!Home!</h2>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Main;","import React from 'react';\r\nimport Main from '../components/Main/Main';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div>\r\n          <Main />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;","import React from 'react';\r\nimport queryString from 'query-string';\r\n\r\nconst About = ({location, match}) => {\r\n    const query = queryString.parse(location.search);\r\n    console.log(query);\r\n    return (\r\n        <div>\r\n            <h2>About {match.params.name}</h2>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default About;","import React from 'react';\r\n\r\nconst Post = ({match}) => {\r\n    return (\r\n        <div>\r\n            포스트 {match.params.id}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Post;","import React from 'react';\r\nimport { Link, Route } from 'react-router-dom';\r\nimport Post from './Post'; \r\n\r\nconst Posts = ({match}) => {\r\n    return (\r\n        <div>\r\n           <h2>Post List</h2> \r\n           <ul>\r\n                <li><Link to={`${match.url}/1`}>Post #1</Link></li>\r\n                <li><Link to={`${match.url}/2`}>Post #2</Link></li>\r\n                <li><Link to={`${match.url}/3`}>Post #3</Link></li>\r\n                <li><Link to={`${match.url}/4`}>Post #4</Link></li>\r\n           </ul>\r\n           <Route exact path={match.url} render={()=>(<h3>Please select any post</h3>)}/>\r\n           <Route path={`${match.url}/:id`} component={Post}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Posts;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport './Menu.css';\r\n\r\nconst Menu = () => {\r\n    const activeStyle = {\r\n        color: 'green',\r\n        fontSize: '2rem'\r\n    };\r\n\r\n    return (\r\n        <div className=\"menu-container\">\r\n            <ul>\r\n                <li><NavLink exact to=\"/\" activeStyle={activeStyle}>Home</NavLink></li>\r\n                <li><NavLink exact to=\"/about\" activeStyle={activeStyle}>About</NavLink></li>\r\n                <li><NavLink to=\"/about/foo\" activeStyle={activeStyle}>About Foo</NavLink></li>\r\n                <li><NavLink to=\"/posts\" activeStyle={activeStyle}>Posts</NavLink></li>\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Menu;","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport { Home, About, Posts } from '../pages';\nimport { Switch } from 'react-router-dom/cjs/react-router-dom.min';\nimport Menu from '../components/Menu/Menu';\nimport './App.css';\n\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <Menu />\n                <div className=\"content-container\">\n                <Route exact path=\"/\" component={Home}/>\n                <Switch>\n                  <Route path=\"/about/:name\" component={About}/>\n                  <Route path=\"/about\" component={About}/>\n                </Switch>\n                <Route path=\"/posts\" component={Posts}/>\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from '../shared/App';\r\n\r\nconst Root = () => (\r\n    <BrowserRouter>\r\n        <App/>\r\n    </BrowserRouter>\r\n);\r\n\r\nexport default Root;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from './client/Root';\n// import registerServiceWorker from './serviceWorker';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(<Root />, document.getElementById('root'));\nserviceWorker.unregister();\n// registerServiceWorker();"],"sourceRoot":""}